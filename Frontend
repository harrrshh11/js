Backend
mkdir backend && cd backend
npm init -y

Folder Structure
backend/
│── server.js
│── config/
│   └── db.js
│── routes/
│   ├── auth.js
│   ├── votes.js
│── models/
│   ├── User.js
│   ├── Vote.js
│── middleware/
│   └── authMiddleware.js
│── .env

server.j
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const http = require("http");
const { Server } = require("socket.io");

const db = require("./config/db");
const authRoutes = require("./routes/auth");
const voteRoutes = require("./routes/votes");

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

app.use(cors());
app.use(express.json());

app.use("/api/auth", authRoutes);
app.use("/api/votes", voteRoutes);

io.on("connection", (socket) => {
    console.log("New client connected:", socket.id);

    socket.on("vote_cast", (voteData) => {
        io.emit("update_votes", voteData);
    });

    socket.on("disconnect", () => {
        console.log("Client disconnected:", socket.id);
    });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));

config/db.js
const mysql = require("mysql2");

const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME
});

db.connect((err) => {
    if (err) {
        console.error("Database Connection Failed:", err);
        return;
    }
    console.log("Connected to MySQL Database!");
});

module.exports = db;

routes/auth.js
const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const db = require("../config/db");

const router = express.Router();

// Register User
router.post("/register", async (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    
    db.query("INSERT INTO users (username, password) VALUES (?, ?)", [username, hashedPassword], (err) => {
        if (err) return res.status(500).json({ error: "Registration failed" });
        res.status(201).json({ message: "User registered successfully" });
    });
});

// Login User
router.post("/login", (req, res) => {
    const { username, password } = req.body;

    db.query("SELECT * FROM users WHERE username = ?", [username], async (err, results) => {
        if (err || results.length === 0) return res.status(401).json({ error: "Invalid credentials" });

        const isMatch = await bcrypt.compare(password, results[0].password);
        if (!isMatch) return res.status(401).json({ error: "Invalid credentials" });

        const token = jwt.sign({ id: results[0].id }, process.env.JWT_SECRET, { expiresIn: "1h" });
        res.json({ token, username });
    });
});

module.exports = router;

routes/votes.js
const express = require("express");
const db = require("../config/db");
const authMiddleware = require("../middleware/authMiddleware");

const router = express.Router();

// Cast a vote
router.post("/cast", authMiddleware, (req, res) => {
    const { candidate } = req.body;
    const userId = req.user.id;

    db.query("INSERT INTO votes (user_id, candidate) VALUES (?, ?)", [userId, candidate], (err) => {
        if (err) return res.status(500).json({ error: "Voting failed" });
        res.json({ message: "Vote cast successfully" });
    });
});

// Get votes count
router.get("/results", (req, res) => {
    db.query("SELECT candidate, COUNT(*) as votes FROM votes GROUP BY candidate", (err, results) => {
        if (err) return res.status(500).json({ error: "Failed to fetch results" });
        res.json(results);
    });
});

module.exports = router;

middleware/authMiddleware.js
const jwt = require("jsonwebtoken");

module.exports = (req, res, next) => {
    const token = req.header("Authorization");
    if (!token) return res.status(403).json({ error: "Access Denied" });

    try {
        const verified = jwt.verify(token.replace("Bearer ", ""), process.env.JWT_SECRET);
        req.user = verified;
        next();
    } catch (error) {
        res.status(401).json({ error: "Invalid Token" });
    }
};

.env
PORT=5000
DB_HOST=localhost
DB_USER=root
DB_PASS=yourpassword
DB_NAME=voting_db
JWT_SECRET=your_jwt_secret

